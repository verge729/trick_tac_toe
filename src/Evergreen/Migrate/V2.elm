module Evergreen.Migrate.V2 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.com/docs/evergreen> for more info.

-}

import Array
import Evergreen.V1.Frontend.Model
import Evergreen.V1.Types
import Evergreen.V1.Types.Base.Board
import Evergreen.V1.Types.Base.Sector
import Evergreen.V1.Types.Board
import Evergreen.V1.Types.Coordinates
import Evergreen.V1.Types.Events
import Evergreen.V1.Types.Navigation
import Evergreen.V1.Types.Player
import Evergreen.V1.Types.SectorAttribute
import Evergreen.V1.Types.Storage.Connectivity
import Evergreen.V1.Types.Storage.Game
import Evergreen.V1.Types.Storage.User
import Evergreen.V1.Types.Tricks.Trick
import Evergreen.V1.Types.Ultimate.Sector
import Evergreen.V1.Types.Victory
import Evergreen.V2.Frontend.Model
import Evergreen.V2.Types
import Evergreen.V2.Types.Base.Board
import Evergreen.V2.Types.Base.Sector
import Evergreen.V2.Types.Board
import Evergreen.V2.Types.Coordinates
import Evergreen.V2.Types.Events
import Evergreen.V2.Types.Navigation
import Evergreen.V2.Types.Player
import Evergreen.V2.Types.SectorAttribute
import Evergreen.V2.Types.Storage.Connectivity
import Evergreen.V2.Types.Storage.Game
import Evergreen.V2.Types.Storage.User
import Evergreen.V2.Types.Tricks.Trick
import Evergreen.V2.Types.Ultimate.Sector
import Evergreen.V2.Types.Victory
import Lamdera.Migrations exposing (..)
import List
import Maybe


frontendModel : Evergreen.V1.Types.FrontendModel -> ModelMigration Evergreen.V2.Types.FrontendModel Evergreen.V2.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V1.Types.BackendModel -> ModelMigration Evergreen.V2.Types.BackendModel Evergreen.V2.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V1.Types.FrontendMsg -> MsgMigration Evergreen.V2.Types.FrontendMsg Evergreen.V2.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V1.Types.ToBackend -> MsgMigration Evergreen.V2.Types.ToBackend Evergreen.V2.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V1.Types.BackendMsg -> MsgMigration Evergreen.V2.Types.BackendMsg Evergreen.V2.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V1.Types.ToFrontend -> MsgMigration Evergreen.V2.Types.ToFrontend Evergreen.V2.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_Types_FrontendModel : Evergreen.V1.Types.FrontendModel -> Evergreen.V2.Types.FrontendModel
migrate_Types_FrontendModel old =
    old |> migrate_Frontend_Model_FrontendModel


migrate_Frontend_Model_FrontendModel : Evergreen.V1.Frontend.Model.FrontendModel -> Evergreen.V2.Frontend.Model.FrontendModel
migrate_Frontend_Model_FrontendModel old =
    { key = old.key
    , current_coordinate = old.current_coordinate |> Maybe.map migrate_Types_Coordinates_Coordinates
    , next_coordinate_low = old.next_coordinate_low |> Maybe.map migrate_Types_Coordinates_Sector
    , next_coordinate_mid = old.next_coordinate_mid |> Maybe.map migrate_Types_Coordinates_Sector
    , player_one = old.player_one |> migrate_Types_Player_Player
    , player_two = old.player_two |> migrate_Types_Player_Player
    , current_player = old.current_player |> migrate_Types_Player_Player
    , path_to_victory = old.path_to_victory |> migrate_Types_Victory_PathToVictory
    , turn = old.turn
    , list_events = old.list_events |> List.map migrate_Types_Events_Event
    , seed = old.seed
    , user = old.user |> Maybe.map migrate_Types_Storage_User_User
    , game = old.game |> Maybe.map migrate_Types_Storage_Game_Game
    , user_games = old.user_games |> migrate_Types_Storage_Game_GameTypes
    , view_data_panel = old.view_data_panel |> migrate_Types_Navigation_DataPanel
    , view_game_area = old.view_game_area |> migrate_Types_Navigation_GameArea
    , view_full_area = old.view_full_area |> migrate_Types_Navigation_FullView
    , login_register_handle = old.login_register_handle
    , login_register_keyphrase = old.login_register_keyphrase
    , m_error_message = old.m_error_message
    , game_creation_name = old.game_creation_name
    , game_creation_board = old.game_creation_board |> Maybe.map migrate_Types_Board_SelectBoard
    , m_join_code = old.m_join_code
    }


migrate_Types_Base_Board_RegularBoard : Evergreen.V1.Types.Base.Board.RegularBoard -> Evergreen.V2.Types.Base.Board.RegularBoard
migrate_Types_Base_Board_RegularBoard old =
    old |> Array.map migrate_Types_Base_Sector_Sector


migrate_Types_Base_Sector_Sector : Evergreen.V1.Types.Base.Sector.Sector -> Evergreen.V2.Types.Base.Sector.Sector
migrate_Types_Base_Sector_Sector old =
    { state = old.state |> migrate_Types_SectorAttribute_State
    , content = old.content |> migrate_Types_SectorAttribute_Content
    , coordinate = old.coordinate |> migrate_Types_Coordinates_Sector
    }


migrate_Types_Board_Board : Evergreen.V1.Types.Board.Board -> Evergreen.V2.Types.Board.Board
migrate_Types_Board_Board old =
    case old of
        Evergreen.V1.Types.Board.NotSelected ->
            Evergreen.V2.Types.Board.NotSelected

        Evergreen.V1.Types.Board.Regular p0 ->
            Evergreen.V2.Types.Board.Regular (p0 |> migrate_Types_Board_RegularBoard)

        Evergreen.V1.Types.Board.Ultimate p0 ->
            Evergreen.V2.Types.Board.Ultimate (p0 |> migrate_Types_Board_UltimateBoard)


migrate_Types_Board_RegularBoard : Evergreen.V1.Types.Board.RegularBoard -> Evergreen.V2.Types.Board.RegularBoard
migrate_Types_Board_RegularBoard old =
    old |> Array.map migrate_Types_Base_Sector_Sector


migrate_Types_Board_SelectBoard : Evergreen.V1.Types.Board.SelectBoard -> Evergreen.V2.Types.Board.SelectBoard
migrate_Types_Board_SelectBoard old =
    case old of
        Evergreen.V1.Types.Board.SelectRegular ->
            Evergreen.V2.Types.Board.SelectRegular

        Evergreen.V1.Types.Board.SelectUltimate ->
            Evergreen.V2.Types.Board.SelectUltimate


migrate_Types_Board_UltimateBoard : Evergreen.V1.Types.Board.UltimateBoard -> Evergreen.V2.Types.Board.UltimateBoard
migrate_Types_Board_UltimateBoard old =
    old |> Array.map migrate_Types_Ultimate_Sector_Sector


migrate_Types_Coordinates_CoordinateSystem : Evergreen.V1.Types.Coordinates.CoordinateSystem -> Evergreen.V2.Types.Coordinates.CoordinateSystem
migrate_Types_Coordinates_CoordinateSystem old =
    case old of
        Evergreen.V1.Types.Coordinates.Regular p0 ->
            Evergreen.V2.Types.Coordinates.Regular (p0 |> migrate_Types_Coordinates_Sector)

        Evergreen.V1.Types.Coordinates.Ultimate p0 ->
            Evergreen.V2.Types.Coordinates.Ultimate (p0 |> migrate_Types_Coordinates_Coordinates)


migrate_Types_Coordinates_Coordinates : Evergreen.V1.Types.Coordinates.Coordinates -> Evergreen.V2.Types.Coordinates.Coordinates
migrate_Types_Coordinates_Coordinates old =
    { low = old.low |> migrate_Types_Coordinates_Sector
    , mid = old.mid |> migrate_Types_Coordinates_Sector
    }


migrate_Types_Coordinates_Sector : Evergreen.V1.Types.Coordinates.Sector -> Evergreen.V2.Types.Coordinates.Sector
migrate_Types_Coordinates_Sector old =
    case old of
        Evergreen.V1.Types.Coordinates.Zero ->
            Evergreen.V2.Types.Coordinates.Zero

        Evergreen.V1.Types.Coordinates.One ->
            Evergreen.V2.Types.Coordinates.One

        Evergreen.V1.Types.Coordinates.Two ->
            Evergreen.V2.Types.Coordinates.Two

        Evergreen.V1.Types.Coordinates.Three ->
            Evergreen.V2.Types.Coordinates.Three

        Evergreen.V1.Types.Coordinates.Four ->
            Evergreen.V2.Types.Coordinates.Four

        Evergreen.V1.Types.Coordinates.Five ->
            Evergreen.V2.Types.Coordinates.Five

        Evergreen.V1.Types.Coordinates.Six ->
            Evergreen.V2.Types.Coordinates.Six

        Evergreen.V1.Types.Coordinates.Seven ->
            Evergreen.V2.Types.Coordinates.Seven

        Evergreen.V1.Types.Coordinates.Eight ->
            Evergreen.V2.Types.Coordinates.Eight


migrate_Types_Events_Event : Evergreen.V1.Types.Events.Event -> Evergreen.V2.Types.Events.Event
migrate_Types_Events_Event old =
    { turn = old.turn
    , event = old.event |> migrate_Types_Events_EventType
    , player = old.player |> migrate_Types_Player_Player
    , coordinates = old.coordinates |> migrate_Types_Coordinates_CoordinateSystem
    }


migrate_Types_Events_EventType : Evergreen.V1.Types.Events.EventType -> Evergreen.V2.Types.Events.EventType
migrate_Types_Events_EventType old =
    case old of
        Evergreen.V1.Types.Events.Turn ->
            Evergreen.V2.Types.Events.Turn

        Evergreen.V1.Types.Events.Trick p0 ->
            Evergreen.V2.Types.Events.Trick (p0 |> migrate_Types_Tricks_Trick_Trick)

        Evergreen.V1.Types.Events.ClaimedSector ->
            Evergreen.V2.Types.Events.ClaimedSector


migrate_Types_Navigation_DataPanel : Evergreen.V1.Types.Navigation.DataPanel -> Evergreen.V2.Types.Navigation.DataPanel
migrate_Types_Navigation_DataPanel old =
    case old of
        Evergreen.V1.Types.Navigation.Menu ->
            Evergreen.V2.Types.Navigation.Menu

        Evergreen.V1.Types.Navigation.GameDetails ->
            Evergreen.V2.Types.Navigation.GameDetails


migrate_Types_Navigation_FullView : Evergreen.V1.Types.Navigation.FullView -> Evergreen.V2.Types.Navigation.FullView
migrate_Types_Navigation_FullView old =
    case old of
        Evergreen.V1.Types.Navigation.Authenticate ->
            Evergreen.V2.Types.Navigation.Authenticate

        Evergreen.V1.Types.Navigation.Authenticated ->
            Evergreen.V2.Types.Navigation.Authenticated

        Evergreen.V1.Types.Navigation.WhatIsThis ->
            Evergreen.V2.Types.Navigation.WhatIsThis


migrate_Types_Navigation_GameArea : Evergreen.V1.Types.Navigation.GameArea -> Evergreen.V2.Types.Navigation.GameArea
migrate_Types_Navigation_GameArea old =
    case old of
        Evergreen.V1.Types.Navigation.Game ->
            Evergreen.V2.Types.Navigation.Game

        Evergreen.V1.Types.Navigation.GameListActive ->
            Evergreen.V2.Types.Navigation.GameListActive

        Evergreen.V1.Types.Navigation.GameListWaiting ->
            Evergreen.V2.Types.Navigation.GameListWaiting

        Evergreen.V1.Types.Navigation.GameListFinished ->
            Evergreen.V2.Types.Navigation.GameListFinished

        Evergreen.V1.Types.Navigation.CreateGame ->
            Evergreen.V2.Types.Navigation.CreateGame

        Evergreen.V1.Types.Navigation.Help ->
            Evergreen.V2.Types.Navigation.Help

        Evergreen.V1.Types.Navigation.NotIdentified ->
            Evergreen.V2.Types.Navigation.NotIdentified

        Evergreen.V1.Types.Navigation.JoinGame ->
            Evergreen.V2.Types.Navigation.JoinGame


migrate_Types_Player_Player : Evergreen.V1.Types.Player.Player -> Evergreen.V2.Types.Player.Player
migrate_Types_Player_Player old =
    old


migrate_Types_SectorAttribute_Content : Evergreen.V1.Types.SectorAttribute.Content -> Evergreen.V2.Types.SectorAttribute.Content
migrate_Types_SectorAttribute_Content old =
    case old of
        Evergreen.V1.Types.SectorAttribute.Clear ->
            Evergreen.V2.Types.SectorAttribute.Clear

        Evergreen.V1.Types.SectorAttribute.Trick p0 ->
            Evergreen.V2.Types.SectorAttribute.Trick (p0 |> migrate_Types_Tricks_Trick_Trick)


migrate_Types_SectorAttribute_State : Evergreen.V1.Types.SectorAttribute.State -> Evergreen.V2.Types.SectorAttribute.State
migrate_Types_SectorAttribute_State old =
    case old of
        Evergreen.V1.Types.SectorAttribute.Free ->
            Evergreen.V2.Types.SectorAttribute.Free

        Evergreen.V1.Types.SectorAttribute.Orphaned ->
            Evergreen.V2.Types.SectorAttribute.Orphaned

        Evergreen.V1.Types.SectorAttribute.Claimed p0 ->
            Evergreen.V2.Types.SectorAttribute.Claimed (p0 |> migrate_Types_Player_Player)


migrate_Types_Storage_Connectivity_Connectivity : Evergreen.V1.Types.Storage.Connectivity.Connectivity -> Evergreen.V2.Types.Storage.Connectivity.Connectivity
migrate_Types_Storage_Connectivity_Connectivity old =
    case old of
        Evergreen.V1.Types.Storage.Connectivity.Connected p0 ->
            Evergreen.V2.Types.Storage.Connectivity.Connected p0

        Evergreen.V1.Types.Storage.Connectivity.Disconnected ->
            Evergreen.V2.Types.Storage.Connectivity.Disconnected


migrate_Types_Storage_Game_Game : Evergreen.V1.Types.Storage.Game.Game -> Evergreen.V2.Types.Storage.Game.Game
migrate_Types_Storage_Game_Game old =
    { id = old.id |> migrate_Types_Storage_Game_GameId
    , board = old.board |> migrate_Types_Board_Board
    , player_one = old.player_one |> migrate_Types_Storage_User_User
    , player_two = old.player_two |> Maybe.map migrate_Types_Storage_User_User
    , current_player = old.current_player |> migrate_Types_Storage_User_User
    , turn = old.turn
    , event_log = old.event_log |> List.map migrate_Types_Events_Event
    , game_name = old.game_name
    , path_to_victory = old.path_to_victory |> migrate_Types_Victory_PathToVictory
    , current_coordinate = old.current_coordinate |> Maybe.map migrate_Types_Coordinates_CoordinateSystem
    }


migrate_Types_Storage_Game_GameId : Evergreen.V1.Types.Storage.Game.GameId -> Evergreen.V2.Types.Storage.Game.GameId
migrate_Types_Storage_Game_GameId old =
    case old of
        Evergreen.V1.Types.Storage.Game.GameId p0 ->
            Evergreen.V2.Types.Storage.Game.GameId p0


migrate_Types_Storage_Game_GameTypes : Evergreen.V1.Types.Storage.Game.GameTypes -> Evergreen.V2.Types.Storage.Game.GameTypes
migrate_Types_Storage_Game_GameTypes old =
    { active = old.active |> List.map migrate_Types_Storage_Game_Game
    , waiting = old.waiting |> List.map migrate_Types_Storage_Game_Game
    , finished = old.finished |> List.map migrate_Types_Storage_Game_Game
    }


migrate_Types_Storage_User_User : Evergreen.V1.Types.Storage.User.User -> Evergreen.V2.Types.Storage.User.User
migrate_Types_Storage_User_User old =
    { handle = old.handle
    , keyphrase = old.keyphrase
    , id = old.id
    , state = old.state |> migrate_Types_Storage_Connectivity_Connectivity
    }


migrate_Types_Tricks_Trick_Trick : Evergreen.V1.Types.Tricks.Trick.Trick -> Evergreen.V2.Types.Tricks.Trick.Trick
migrate_Types_Tricks_Trick_Trick old =
    { trick_type = old.trick_type |> migrate_Types_Tricks_Trick_TrickType
    , description = old.description
    , triggered = old.triggered
    }


migrate_Types_Tricks_Trick_TrickType : Evergreen.V1.Types.Tricks.Trick.TrickType -> Evergreen.V2.Types.Tricks.Trick.TrickType
migrate_Types_Tricks_Trick_TrickType old =
    case old of
        Evergreen.V1.Types.Tricks.Trick.Vanish ->
            Evergreen.V2.Types.Tricks.Trick.Vanish

        Evergreen.V1.Types.Tricks.Trick.WrongDestination ->
            Evergreen.V2.Types.Tricks.Trick.WrongDestination


migrate_Types_Ultimate_Sector_Sector : Evergreen.V1.Types.Ultimate.Sector.Sector -> Evergreen.V2.Types.Ultimate.Sector.Sector
migrate_Types_Ultimate_Sector_Sector old =
    { coordinate = old.coordinate |> migrate_Types_Coordinates_Sector
    , state = old.state |> migrate_Types_SectorAttribute_State
    , board = old.board |> migrate_Types_Base_Board_RegularBoard
    }


migrate_Types_Victory_PathToVictory : Evergreen.V1.Types.Victory.PathToVictory -> Evergreen.V2.Types.Victory.PathToVictory
migrate_Types_Victory_PathToVictory old =
    case old of
        Evergreen.V1.Types.Victory.Acheived p0 ->
            Evergreen.V2.Types.Victory.Acheived (p0 |> migrate_Types_Player_Player)

        Evergreen.V1.Types.Victory.Unacheived ->
            Evergreen.V2.Types.Victory.Unacheived
